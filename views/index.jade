
head
  meta(charset='UTF-8')
  // <meta name="viewport" content="width=device-width, initial-scale=1">
  meta(name='viewport', content='width=device-width, initial-scale=1, user-scalable=no, maximum-scale=0.35, minimum-scale=0.35')
  |     
  link(rel='stylesheet', href='./stylesheets/style.css')
  |   
  body(onload='getDeviceList()')
    // オーバーレイ
    #js-join-trigger.overlay-all
      img#top_wait(src='./top.png')
      br
      |       
      #title_wait ALIEN
      |       
      p#wait_message Tap to start video call
    |   
    .container
      .room
        #container
          #js-remote-streams0.remote-streams
            video#js-local-stream.local-video(style='transform: scaleX(-1);')
          |     
          p
          // ルーム検索
          div
            span#js-room-mode
            // ルームに接続
            button#js-leave-trigger Leave
            |         
            button#js-share-trigger share
            |         
            br
            |           
            button#js-toggle-camera &#x30AB;&#x30E1;&#x30E9;ON
            |       
            |           
            button#js-toggle-microphone &#x30DE;&#x30A4;&#x30AF;ON
            |           
            button#change change
            br
            // テスト用にどのデバイスを有効化しているか表示
            // ↓ここから
            //
              <select id="mic_list" size="1" style="width:160pt;">
              <option>(audio)</option>
              </select>
              <select id="speaker_list" size="1" style="width:160pt;">
              <option>(speaker)</option>
              </select>
            // ↑ここまでをコメントアウトで非表示にできる
            button#speaker_OFF(onclick='clickSwitch()', style='display: block') &#x30B9;&#x30D4;&#x30FC;&#x30AB;&#x30FC;OFF
            |            
            button#speaker_ON(onclick='clickSwitch()', style='display: none') &#x30B9;&#x30D4;&#x30FC;&#x30AB;&#x30FC;ON
            //
              <button class="sp-mode" style="display:none;">スマートフォン用で表示</button>
              -           <button class="pc-mode" style="display:none;">PC用で表示</button>
        //
          <div>
          <pre class="messages" id="js-messages"></pre>
          <input type="text" id="js-local-text">
          <button id="js-send-trigger">Send</button>
          </div>
        p#js-meta.meta
      // container
      script.
        var micList = document.getElementById("mic_list");
        var speakerList = document.getElementById("speaker_list");
        function clearDeviceList() {
        while(micList.lastChild) {
        micList.removeChild(micList.lastChild);
        }
        while(speakerList.lastChild) {
        speakerList.removeChild(speakerList.lastChild);
        }
        }
        //スピーカーテスト
        //const [{ deviceId }] = devices.filter(device => device.kind === 'audiooutput');
        //スピーカーとマイクを検出
        function getDeviceList() {
        clearDeviceList();
        navigator.mediaDevices.enumerateDevices()
        .then(function(devices) {
        devices.forEach(function(device) {
        console.log(device.kind + ": " + device.label +
        " id = " + device.deviceId);
        addDevice(device);
        });
        })
        .catch(function(err) {
        console.error('enumerateDevide ERROR:', err);
        });
        }
        function addDevice(device) {
        if (device.kind === 'audioinput') {
        var id = device.deviceId;
        var label = device.label || 'microphone'; // label is available for https
        var option = document.createElement('option');
        option.setAttribute('value', id);
        option.innerHTML = label + '(' + id + ')';;
        micList.appendChild(option);
        }
        else if (device.kind === 'audiooutput') {
        var id = device.deviceId;
        var label = device.label || 'speaker'; // label is available for https
        var option = document.createElement('option');
        option.setAttribute('value', id);
        option.innerHTML = label + '(' + id + ')';
        speakerList.appendChild(option);
        }
        // else {
        //  console.error('UNKNOWN Device kind:' + device.kind);
        // }
        }
        function getSelectedAudio() {
        var audioId = micList.options[micList.selectedIndex].value;
        console.log('selected audioID =' + audioId);
        var constraints = {
        audio: {
        deviceId: audioId
        }
        };
        console.log('mediaDevice.getMedia() constraints:', constraints);
        navigator.mediaDevices.getUserMedia(
        constraints
        ).then(function(stream) {
        localStream = stream;
        logStream('selectedVideo', stream);
        localVideo.srcObject = stream;
        }).catch(function(err){
        console.error('getUserMedia Err:', err);
        });
        }
        function getSelectedSpeaker() {
        var speakerId = speakerList.options[speakerList.selectedIndex].value;
        localVideo.volume = 0;
        localVideo.setSinkId(speakerId)
        .then(function() {
        console.log('setSinkID Success');
        })
        .catch(function(err) {
        console.error('setSinkId Err:', err);
        });
        }
        function clickSwitch(){
        if(micList.selectedIndex == 1){
        document.getElementById('speaker_ON').style.display="none";
        document.getElementById('speaker_OFF').style.display="block";
        micList.selectedIndex = 0;
        // speakerList.selectedIndex = 0;
        }
        else{
        document.getElementById('speaker_OFF').style.display="none";
        document.getElementById('speaker_ON').style.display="block";
        micList.selectedIndex = 1;
        //  speakerList.selectedIndex = 1;
        }
        }
        //
      // threevrm関連
      script(src='https://unpkg.com/three@0.108')
      |     
      script(src='https://unpkg.com/three@0.108/examples/js/loaders/GLTFLoader.js')
      |     
      script(src='https://unpkg.com/@pixiv/three-vrm@0.1/lib/three-vrm.js')
      |     
      script(src='./javascripts/jeelizFaceFilter.js')
      |     
      script(src='./javascripts/JeelizResizer.js')
      |     
      script(src='./javascripts/threevrm.js')
      // マスク関連
      script(src='./javascripts/mask.js')
      // jquery関連
      script(src='https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js')
      // skyway関連
      script(src='//cdn.webrtc.ecl.ntt.com/skyway-latest.js')
      |     
      script(src='./key.js')
      |     
      script(src='./javascripts/SharedUrl.js')
      |     
      script(src='./javascripts/Waiting.js')
      |     
      script(src='./javascripts/script.js')
